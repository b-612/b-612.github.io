{"version":3,"sources":["from-polyfill.js"],"names":["toStr","isCallable","maxSafeInteger","toLength","Array","from","Object","prototype","toString","fn","call","Math","pow","value","len","number","Number","isNaN","isFinite","floor","abs","toInteger","min","max","arrayLike","items","TypeError","T","mapFn","arguments","length","kValue","A","this","k"],"mappings":"AAAA,cAEA,WAGiB,IACPA,EAEAC,EAkBAC,EAEAC,EAxBHC,MAAMC,OACTD,MAAMC,MACAL,EAAQM,OAAOC,UAAUC,SAEzBP,EAAa,SAAoBQ,GACnC,MAAqB,mBAAPA,GAAwC,sBAAnBT,EAAMU,KAAKD,IAiB5CP,EAAiBS,KAAKC,IAAI,EAAG,IAAM,EAEnCT,EAAW,SAAkBU,GAC/B,IAAIC,EAjBU,SAAmBD,GACjC,IAAIE,EAASC,OAAOH,GAEpB,OAAII,MAAMF,GACD,EAGM,IAAXA,GAAiBG,SAASH,IAItBA,EAAS,EAAI,GAAK,GAAKJ,KAAKQ,MAAMR,KAAKS,IAAIL,IAH1CA,EASCM,CAAUR,GACpB,OAAOF,KAAKW,IAAIX,KAAKY,IAAIT,EAAK,GAAIZ,IAI7B,SAAcsB,GAInB,IAEIC,EAAQnB,OAAOkB,GAEnB,GAAiB,MAAbA,EACF,MAAM,IAAIE,UAAU,oEAItB,IACIC,EADAC,EAAQC,UAAUC,OAAS,EAAID,UAAU,QAAK,EAGlD,QAAqB,IAAVD,EAAuB,CAGhC,IAAK3B,EAAW2B,GACd,MAAM,IAAIF,UAAU,qEAIlBG,UAAUC,OAAS,IACrBH,EAAIE,UAAU,IAiBlB,IAXA,IASIE,EATAjB,EAAMX,EAASsB,EAAMK,QAKrBE,EAAI/B,EAhCAgC,MAgCgB3B,OAAO,IAhCvB2B,KAgC6BnB,IAAQ,IAAIV,MAAMU,GAEnDoB,EAAI,EAIDA,EAAIpB,GACTiB,EAASN,EAAMS,GAGbF,EAAEE,GADAN,OACkB,IAAND,EAAoBC,EAAMG,EAAQG,GAAKN,EAAMlB,KAAKiB,EAAGI,EAAQG,GAEpEH,EAGTG,GAAK,EAMP,OAFAF,EAAEF,OAAShB,EAEJkB,KAzFf","sourcesContent":["'use strict';\n\n(function () {\n  // Production steps of ECMA-262, Edition 6, 22.1.2.1\n  if (!Array.from) {\n    Array.from = (function () {\n      var toStr = Object.prototype.toString;\n      var isCallable = function (fn) {\n        return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n      };\n      var toInteger = function (value) {\n        var number = Number(value);\n        if (isNaN(number)) { return 0; }\n        if (number === 0 || !isFinite(number)) { return number; }\n        return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n      };\n      var maxSafeInteger = Math.pow(2, 53) - 1;\n      var toLength = function (value) {\n        var len = toInteger(value);\n        return Math.min(Math.max(len, 0), maxSafeInteger);\n      };\n\n      // The length property of the from method is 1.\n      return function from(arrayLike/*, mapFn, thisArg */) {\n        // 1. Let C be the this value.\n        var C = this;\n\n        // 2. Let items be ToObject(arrayLike).\n        var items = Object(arrayLike);\n\n        // 3. ReturnIfAbrupt(items).\n        if (arrayLike == null) {\n          throw new TypeError('Array.from requires an array-like object - not null or undefined');\n        }\n\n        // 4. If mapfn is undefined, then let mapping be false.\n        var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n        var T;\n        if (typeof mapFn !== 'undefined') {\n          // 5. else\n          // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n          if (!isCallable(mapFn)) {\n            throw new TypeError('Array.from: when provided, the second argument must be a function');\n          }\n\n          // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n          if (arguments.length > 2) {\n            T = arguments[2];\n          }\n        }\n\n        // 10. Let lenValue be Get(items, \"length\").\n        // 11. Let len be ToLength(lenValue).\n        var len = toLength(items.length);\n\n        // 13. If IsConstructor(C) is true, then\n        // 13. a. Let A be the result of calling the [[Construct]] internal method\n        // of C with an argument list containing the single item len.\n        // 14. a. Else, Let A be ArrayCreate(len).\n        var A = isCallable(C) ? Object(new C(len)) : new Array(len);\n\n        // 16. Let k be 0.\n        var k = 0;\n        // 17. Repeat, while k < lenâ€¦ (also steps a - h)\n        var kValue;\n        while (k < len) {\n          kValue = items[k];\n          if (mapFn) {\n            A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n          } else {\n            A[k] = kValue;\n          }\n          k += 1;\n        }\n        // 18. Let putStatus be Put(A, \"length\", len, true).\n        A.length = len;\n        // 20. Return A.\n        return A;\n      };\n    }());\n  }\n})();\n"],"file":"from-polyfill.min.js"}